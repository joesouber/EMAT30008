#%%
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import root

def add_matrix(N):
    A = np.zeros((N-1,N-1))
    np.fill_diagonal(A, -2)
    np.fill_diagonal(A[1:], 1)
    np.fill_diagonal(A[:,1:], 1)
    return A

def q(x):
    q = np.ones((N-1))
    return q

#create matrix of 0 besides the first and last row for BDD
def bdd_matrix(gamma1, gamma2, N, bc_type_1, bc_type_2, alpha_1=None, alpha_2=None, beta_1=None, beta_2=None):
    b = np.zeros(N-1)
    if bc_type_1 == "Dirichlet":
        b[0] = gamma1
    elif bc_type_1 == "Neumann":
        b[0] = alpha_1
    elif bc_type_1 == "Robin":
        b[0] = alpha_1*dx - beta_1*gamma1
    if bc_type_2 == "Dirichlet":
        b[N-2] = gamma2
    elif bc_type_2 == "Neumann":
        b[N-2] = alpha_2
    elif bc_type_2 == "Robin":
        b[N-2] = alpha_2*dx + beta_2*gamma2
    return np.transpose(b)


#print(bdd_matrix(2, 3, 5))
    

def finite_grid(N, a, b):
    dx = (b-a) / N
    x = np.linspace(a,b,N+1)
    x_int = x[1:-1]
    return dx, x, x_int


#u = np.linalg.solve(add_matrix(10), -bdd_matrix(0,1,10) - dx**2 * q(x_int))
grid = finite_grid(10,0,1)
dx = grid[0]
x = grid[1]
x_int = grid[2]
N = 10



RHS = -bdd_matrix(0, 0, 10, bc_type_1="Dirichlet", bc_type_2="Dirichlet", alpha_1=None, alpha_2=None, beta_1=None, beta_2=None) - dx**2 * q(x_int)

u = np.linalg.solve(add_matrix(10), RHS)
print(u)


def u_source(x,a, b, gamma1, gamma2, D):
   return (-(1/(2*D)) * (x-a) * (x-b)) + ((gamma2 - gamma1) / (b-a)) * (x-a) + gamma1

#u_exact = 1/2 * x*(1-x)
u_exact = u_source(x,0,1,0,0,1)
#A = 0
#B = 1
#gamma1 = 0
#gamma2 = 1
#D = 1

plt.plot(x_int, u, '.', label = "Numerical solution")
plt.plot(x, u_exact, 'k', label = 'Exact solution')
plt.xlabel(f'$x$')
plt.ylabel(f'$u(x)$')
plt.legend()
plt.show()
# %%





